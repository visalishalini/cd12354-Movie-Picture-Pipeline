name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'  # Trigger on frontend code changes
  workflow_dispatch:  # Allows manual trigger

jobs:
  lint:
    name: Lint the code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run linter
        run: |
          cd starter/frontend
          npm run lint

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run tests
        run: |
          cd starter/frontend
          CI=true npm test

  build:
    name: Build the Docker image
    runs-on: ubuntu-latest
    needs: [lint, test]  # Run only after linting and testing jobs pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ vars.AWS_REGION }}
          access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and tag Docker image
        run: |
          cd starter/frontend
          export REACT_APP_MOVIE_API_URL=http://a4d295dc2fa3b4ecfb28e3d05ce09b6a-361389146.us-east-1.elb.amazonaws.com:80
          export IMAGE_TAG=mp-frontend:${{ github.sha }}
          docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $IMAGE_TAG .

      - name: Push image to ECR
        run: |
          export ECR_REPO_URL=${{ secrets.ECR_REPO_URL }}
          docker tag mp-frontend:${{ github.sha }} $ECR_REPO_URL:frontend-${{ github.sha }}
          docker push $ECR_REPO_URL:frontend-${{ github.sha }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          region: ${{ vars.AWS_REGION }}
          access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Set image in Kubernetes manifests
        run: |
          cd starter/frontend/k8s
          export ECR_REPO_URL=${{ vars.ECR_REPO_URL }}
          export IMAGE_TAG=$ECR_REPO_URL:frontend-${{ github.sha }}
          kustomize edit set image frontend=$IMAGE_TAG

      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s
          kustomize build | kubectl apply -f -
